# Just return a 204 - for logging a request and doing nothing else.
location ^~ /log/ {
  add_header      Content-Type text/plain;
  return 204;
}

# Proxy to google image search and redirect to a creative commons result.
location ^~ /img/ {
  if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
    return 403;
  }
  uwsgi_pass  img_py;
  include     uwsgi_params;
}

# Proxy to google web search.
location ^~ /goto/ {
  if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
    return 403;
  }
  uwsgi_pass  goto_py;
  include     uwsgi_params;
}

# Socket.io reflector.
location ^~ /socket.io/ {
  proxy_pass http://socket_node;
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
}

# Proxy to an arbitrary URL.  Used for cross-domain image manipulation.
location ~ ^/proxy/(?P<proxy_protslash>(?P<proxy_prot>https?)://?)?(?P<proxy_uri>(?P<proxy_host>[^/]+\.[a-z]+(?::\d+)?)(?:/.*)?)$ {
  if ($proxy_prot = "") {
    set $proxy_prot http;
  }
  add_header Cache-Control "no-cache, no-store, must-revalidate";
  add_header Access-Control-Allow-Origin *;
  add_header X-XSS-Protection 0;
  resolver 8.8.4.4 8.8.8.8;
  proxy_pass $proxy_prot://$proxy_uri$is_args$args;
  proxy_cache one;
  proxy_redirect ~^([a-z]+://.*)$     /proxy/$1;
  proxy_redirect ~^//(.*)$            /proxy/$proxy_protslash$1;
  proxy_redirect ~^(/.*)$             /proxy/$proxy_protslash$proxy_host$1;
  proxy_set_header   Origin           "";
  proxy_set_header   Referer          "";
  proxy_set_header   X-Real-IP        $remote_addr;
  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
}
